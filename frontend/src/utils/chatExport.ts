// Copyright 2025 Amazon.com, Inc. or its affiliates.
// SPDX-License-Identifier: MIT-0

import {
  Session,
  ConversationMessage,
  MessageSender,
  PersonaInfo,
  ConversationTopic,
  BusinessContext,
  ImageAttachment,
} from '@group-chat-ai/shared';
import { getPersonaDisplayName, getPersonaRole } from './avatarUtils';

export interface ChatExportData {
  session: Session;
  messages: ConversationMessage[];
  conversationTopic?: ConversationTopic;
  businessContext?: BusinessContext;
  personaInfoMap: Record<string, PersonaInfo>;
  exportedAt: string;
  translations?: {
    noMessages: string;
    generatedBy: string;
  };
}

export class ChatExportService {
  /**
   * Generate HTML content for chat export
   */
  static generateHTML(data: ChatExportData): string {
    const { session, messages, conversationTopic, businessContext, personaInfoMap, exportedAt, translations } = data;

    const noMessagesText = translations?.noMessages || 'No messages in this session.';
    const generatedByText = translations?.generatedBy || 'Generated by Group Chat AI - Practice your presentations with AI-powered personas';

    // nosemgrep: html-in-template-string
    const html = `
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Group Chat AI Session - ${this.escapeHtml(new Date(session.createdAt).toLocaleDateString())}</title>
    <style>
        ${this.getCSS()}
    </style>
</head>
<body>
    <div class="container">
        <!-- Header -->
        <header class="header">
            <h1>Group Chat AI - Practice Session Report</h1>
            <div class="session-meta">
                <p><strong>Session ID:</strong> ${this.escapeHtml(session.sessionId)}</p>
                <p><strong>Date:</strong> ${this.escapeHtml(new Date(session.createdAt).toLocaleString())}</p>
                <p><strong>Duration:</strong> ${this.escapeHtml(this.calculateDuration(session.createdAt, session.lastActivity))}</p>
                <p><strong>Messages:</strong> ${this.escapeHtml(messages.length.toString())}</p>
                <p><strong>Exported:</strong> ${this.escapeHtml(new Date(exportedAt).toLocaleString())}</p>
            </div>
        </header>

        <!-- Conversation Topic Section -->
        ${conversationTopic ? this.generateConversationTopicSection(conversationTopic) : ''}

        <!-- Business Context Section -->
        ${businessContext ? this.generateBusinessContextSection(businessContext) : ''}

        <!-- Active Personas Section -->
        ${this.generatePersonasSection(session, personaInfoMap)}

        <!-- Conversation Transcript -->
        <section class="conversation-section">
            <h2>Conversation Transcript</h2>
            <div class="messages-container">
                ${
                  messages.length === 0
                    ? `<p class="no-messages">${this.escapeHtml(noMessagesText)}</p>`
                    : messages
                        .map(message => this.generateMessageHTML(message, personaInfoMap))
                        .join('')
                }
            </div>
        </section>

        <!-- Footer -->
        <footer class="footer">
            <p>${this.escapeHtml(generatedByText)}</p>
            <p class="timestamp">Report generated on ${this.escapeHtml(new Date(exportedAt).toLocaleString())}</p>
        </footer>
    </div>
</body>
</html>`;

    return html;
  }

  /**
   * Generate CSS styles for the HTML export
   */
  private static getCSS(): string {
    return `
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            line-height: 1.4;
            color: #333;
            background-color: #fff;
            font-size: 11pt;
        }

        .container {
            max-width: 100%;
            margin: 0 auto;
            padding: 12px;
        }

        .header {
            text-align: center;
            margin-bottom: 16px;
            padding-bottom: 12px;
            border-bottom: 1px solid #e9ebed;
        }

        .header h1 {
            color: #232f3e;
            font-size: 1.4em;
            margin-bottom: 6px;
        }

        .session-meta {
            display: flex;
            justify-content: center;
            gap: 12px;
            flex-wrap: wrap;
            margin-top: 8px;
        }

        .session-meta p {
            background-color: #f8f9fa;
            padding: 3px 8px;
            border-radius: 3px;
            border: 1px solid #e9ebed;
            font-size: 0.8em;
        }

        .section {
            margin-bottom: 16px;
            padding: 10px;
            background-color: #fafbfc;
            border-radius: 4px;
            border: 1px solid #e9ebed;
        }

        .section h2 {
            color: #232f3e;
            font-size: 1.1em;
            margin-bottom: 8px;
            padding-bottom: 4px;
            border-bottom: 1px solid #d5dbdb;
        }

        .conversation-details {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 8px;
        }

        .detail-item {
            background-color: #fff;
            padding: 6px;
            border-radius: 3px;
            border: 1px solid #d5dbdb;
        }

        .detail-item h4 {
            color: #0073bb;
            margin-bottom: 3px;
            font-size: 0.9em;
        }

        .detail-item p, .detail-item ul {
            font-size: 0.8em;
            line-height: 1.3;
        }

        .detail-item ul {
            padding-left: 12px;
        }

        .detail-item li {
            margin-bottom: 2px;
        }

        .personas-grid {
            display: flex;
            flex-wrap: wrap;
            gap: 8px;
        }

        .persona-card {
            background-color: #fff;
            padding: 6px;
            border-radius: 4px;
            border: 1px solid #d5dbdb;
            text-align: center;
            flex: 1;
            min-width: 120px;
        }

        .persona-card h4 {
            color: #232f3e;
            font-size: 0.9em;
            margin-bottom: 2px;
        }

        .persona-role {
            background-color: #0073bb;
            color: white;
            padding: 1px 6px;
            border-radius: 8px;
            font-size: 0.7em;
            display: inline-block;
            margin-bottom: 3px;
        }

        .conversation-section {
            margin-bottom: 16px;
        }

        .conversation-section h2 {
            color: #232f3e;
            font-size: 1.1em;
            margin-bottom: 12px;
            text-align: center;
        }

        .messages-container {
            max-width: 100%;
            margin: 0 auto;
        }

        .message {
            margin-bottom: 8px;
            padding: 6px;
            border-radius: 4px;
            border: 1px solid #d5dbdb;
            page-break-inside: avoid;
        }

        .message.user {
            background-color: #f0f8ff;
            border-left: 2px solid #0073bb;
        }

        .message.persona {
            background-color: #fff;
            border-left: 2px solid #16191f;
        }

        .message-header {
            display: flex;
            align-items: center;
            gap: 6px;
            margin-bottom: 4px;
            font-weight: bold;
            font-size: 0.85em;
        }

        .message-sender {
            font-size: 0.9em;
        }

        .message.user .message-sender {
            color: #0073bb;
        }

        .message.persona .message-sender {
            color: #232f3e;
        }

        .message-role {
            background-color: #f8f9fa;
            color: #5f6b7a;
            padding: 1px 4px;
            border-radius: 6px;
            font-size: 0.7em;
            font-weight: normal;
        }

        .message.user .message-role {
            background-color: #0073bb;
            color: white;
        }

        .message-timestamp {
            color: #5f6b7a;
            font-size: 0.7em;
            font-weight: normal;
            margin-left: auto;
        }

        .message-content {
            font-size: 0.85em;
            line-height: 1.3;
            white-space: pre-wrap;
        }

        .message-image {
            margin-top: 8px;
            border: 1px solid #d5dbdb;
            border-radius: 4px;
            overflow: hidden;
            background-color: #fafbfc;
        }

        .image-container {
            text-align: center;
            padding: 8px;
            background-color: #fff;
        }

        .message-image-content {
            max-width: 100%;
            max-height: 300px;
            height: auto;
            border-radius: 3px;
            box-shadow: 0 1px 3px rgba(0,0,0,0.1);
        }

        .image-info {
            padding: 6px 8px;
            background-color: #f8f9fa;
            border-top: 1px solid #e9ebed;
            font-size: 0.75em;
            color: #5f6b7a;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .image-filename {
            font-weight: bold;
            color: #232f3e;
        }

        .image-details {
            font-size: 0.9em;
        }

        .no-messages {
            text-align: center;
            color: #5f6b7a;
            font-style: italic;
            padding: 20px;
        }

        .footer {
            text-align: center;
            margin-top: 20px;
            padding-top: 8px;
            border-top: 1px solid #e9ebed;
            color: #5f6b7a;
            font-size: 0.7em;
        }

        .timestamp {
            margin-top: 2px;
            font-size: 0.7em;
        }

        /* Print-specific styles */
        @media print {
            body {
                font-size: 10pt;
                line-height: 1.2;
            }

            .container {
                max-width: none;
                padding: 8px;
            }

            .header {
                page-break-after: avoid;
                margin-bottom: 12px;
                padding-bottom: 8px;
            }

            .header h1 {
                font-size: 1.2em;
                margin-bottom: 4px;
            }

            .section {
                page-break-inside: avoid;
                margin-bottom: 12px;
                padding: 8px;
            }

            .section h2 {
                font-size: 1em;
                margin-bottom: 6px;
            }

            .message {
                page-break-inside: avoid;
                margin-bottom: 6px;
                padding: 4px;
            }

            .message-header {
                font-size: 0.8em;
                margin-bottom: 2px;
            }

            .message-content {
                font-size: 0.8em;
                line-height: 1.2;
            }

            .session-meta {
                flex-direction: row;
                justify-content: center;
                gap: 8px;
            }

            .session-meta p {
                padding: 2px 6px;
                font-size: 0.7em;
            }

            .personas-grid {
                gap: 4px;
            }

            .persona-card {
                padding: 4px;
                min-width: 100px;
            }

            .persona-card h4 {
                font-size: 0.8em;
            }

            .persona-role {
                font-size: 0.6em;
                padding: 1px 4px;
            }

            .conversation-details {
                grid-template-columns: repeat(2, 1fr);
                gap: 6px;
            }

            .detail-item {
                padding: 4px;
            }

            .detail-item h4 {
                font-size: 0.8em;
                margin-bottom: 2px;
            }

            .detail-item p, .detail-item ul {
                font-size: 0.75em;
                line-height: 1.2;
            }

            .footer {
                margin-top: 12px;
                padding-top: 6px;
                font-size: 0.6em;
            }
        }

        @page {
            margin: 0.5in;
            size: letter;
        }
    `;
  }

  /**
   * Generate conversation topic section HTML
   */
  private static generateConversationTopicSection(conversationTopic: ConversationTopic): string {
    // nosemgrep: html-in-template-string
    return `
        <section class="section">
            <h2>Conversation Topic</h2>
            <div class="conversation-details">
                <div class="detail-item">
                    <h4>Title</h4>
                    <p>${this.escapeHtml(conversationTopic.title)}</p>
                </div>
                <div class="detail-item" style="grid-column: 1 / -1;">
                    <h4>Scenario Description</h4>
                    <div style="white-space: pre-wrap; line-height: 1.4;">${this.escapeHtml(conversationTopic.description)}</div>
                </div>
            </div>
        </section>
    `;
  }

  /**
   * Generate business context section HTML
   */
  private static generateBusinessContextSection(businessContext: BusinessContext): string {
    // nosemgrep: html-in-template-string
    return `
        <section class="section">
            <h2>Business Context</h2>
            <div class="conversation-details">
                <div class="detail-item">
                    <h4>Industry</h4>
                    <p>${this.escapeHtml(businessContext.industry)}</p>
                </div>
                <div class="detail-item">
                    <h4>Company Size</h4>
                    <p>${this.escapeHtml(businessContext.companySize)}</p>
                </div>
                <div class="detail-item">
                    <h4>Company Stage</h4>
                    <p>${this.escapeHtml(businessContext.companyStage)}</p>
                </div>
                ${
                  businessContext.keyPriorities.length > 0
                    ? `
                <div class="detail-item">
                    <h4>Key Priorities</h4>
                    <ul>
                        ${businessContext.keyPriorities
                          .map(priority => `<li>${this.escapeHtml(priority)}</li>`)
                          .join('')}
                    </ul>
                </div>
                `
                    : ''
                }
                ${
                  businessContext.challenges.length > 0
                    ? `
                <div class="detail-item">
                    <h4>Challenges</h4>
                    <ul>
                        ${businessContext.challenges
                          .map(challenge => `<li>${this.escapeHtml(challenge)}</li>`)
                          .join('')}
                    </ul>
                </div>
                `
                    : ''
                }
                ${
                  businessContext.stakeholders.length > 0
                    ? `
                <div class="detail-item">
                    <h4>Stakeholders</h4>
                    <ul>
                        ${businessContext.stakeholders
                          .map(
                            stakeholder =>
                              `<li><strong>${this.escapeHtml(stakeholder.role)}</strong> (${this.escapeHtml(stakeholder.influence)})</li>`
                          )
                          .join('')}
                    </ul>
                </div>
                `
                    : ''
                }
                ${
                  businessContext.budgetRange
                    ? `
                <div class="detail-item">
                    <h4>Budget Range</h4>
                    <p>${this.escapeHtml(businessContext.budgetRange)}</p>
                </div>
                `
                    : ''
                }
                ${
                  businessContext.timeline
                    ? `
                <div class="detail-item">
                    <h4>Timeline</h4>
                    <p>${this.escapeHtml(businessContext.timeline)}</p>
                </div>
                `
                    : ''
                }
                ${
                  businessContext.decisionMakingProcess
                    ? `
                <div class="detail-item">
                    <h4>Decision Making Process</h4>
                    <p>${this.escapeHtml(businessContext.decisionMakingProcess)}</p>
                </div>
                `
                    : ''
                }
                ${
                  businessContext.additionalContext
                    ? `
                <div class="detail-item">
                    <h4>Additional Context</h4>
                    <p>${this.escapeHtml(businessContext.additionalContext)}</p>
                </div>
                `
                    : ''
                }
            </div>
        </section>
    `;
  }

  /**
   * Generate personas section HTML
   */
  private static generatePersonasSection(
    session: Session,
    personaInfoMap: Record<string, PersonaInfo>
  ): string {
    // nosemgrep: html-in-template-string
    return `
        <section class="section">
            <h2>Active Personas (${this.escapeHtml(session.activePersonas.length.toString())})</h2>
            <div class="personas-grid">
                ${session.activePersonas
                  .map(personaId => {
                    const personaInfo = personaInfoMap[personaId];
                    const name = personaInfo?.name || getPersonaDisplayName(personaId);
                    const role = personaInfo?.role || getPersonaRole(personaId);
                    const description = personaInfo?.description || `${role} - ${name}`;

                    // nosemgrep: html-in-template-string
                    return `
                    <div class="persona-card">
                        <h4>${this.escapeHtml(name)}</h4>
                        <div class="persona-role">${this.escapeHtml(role)}</div>
                        <p>${this.escapeHtml(description)}</p>
                    </div>
                  `;
                  })
                  .join('')}
            </div>
        </section>
    `;
  }

  /**
   * Generate individual message HTML
   */
  private static generateMessageHTML(
    message: ConversationMessage,
    personaInfoMap: Record<string, PersonaInfo>
  ): string {
    const isUser = message.sender === MessageSender.USER;
    const senderName = isUser ? 'You' : this.getPersonaName(message.personaId, personaInfoMap);
    const senderRole = isUser ? 'User' : this.getPersonaRole(message.personaId, personaInfoMap);
    const timestamp = new Date(message.timestamp).toLocaleTimeString([], {
      hour: '2-digit',
      minute: '2-digit',
    });

    const imageHTML = message.imageAttachment
      ? this.generateImageHTML(message.imageAttachment)
      : '';

    // nosemgrep: html-in-template-string
    return `
        <div class="message ${isUser ? 'user' : 'persona'}">
            <div class="message-header">
                <span class="message-sender">${this.escapeHtml(senderName)}</span>
                <span class="message-role">${this.escapeHtml(senderRole)}</span>
                <span class="message-timestamp">${this.escapeHtml(timestamp)}</span>
            </div>
            <div class="message-content">${this.escapeHtml(message.content)}</div>
            ${imageHTML}
        </div>
    `;
  }

  /**
   * Generate image HTML for message attachments
   */
  private static generateImageHTML(imageAttachment: ImageAttachment): string {
    const imageSrc = this.getImageSrc(imageAttachment);
    if (!imageSrc) {return '';}

    const fileSize = this.formatFileSize(imageAttachment.fileSize || 0);
    const uploadTime = imageAttachment.uploadedAt
      ? new Date(imageAttachment.uploadedAt).toLocaleString()
      : 'Unknown';

    // nosemgrep: html-in-template-string
    return `
        <div class="message-image">
            <div class="image-container">
                <img src="${this.escapeHtml(imageSrc)}" alt="${this.escapeHtml(imageAttachment.fileName || 'Uploaded image')}" class="message-image-content" />
            </div>
            <div class="image-info">
                <span class="image-filename">${this.escapeHtml(imageAttachment.fileName || 'image')}</span>
                <span class="image-details">${this.escapeHtml(fileSize)} • ${this.escapeHtml(uploadTime)}</span>
            </div>
        </div>
    `;
  }

  /**
   * Get image source from attachment
   */
  private static getImageSrc(imageAttachment: ImageAttachment): string {
    if (imageAttachment.thumbnailData) {
      return `data:${this.escapeHtml(imageAttachment.fileType)};base64,${this.escapeHtml(imageAttachment.thumbnailData)}`;
    } else if (imageAttachment.base64Data) {
      return `data:${this.escapeHtml(imageAttachment.fileType)};base64,${this.escapeHtml(imageAttachment.base64Data)}`;
    }
    return '';
  }

  /**
   * Format file size for display
   */
  private static formatFileSize(bytes: number): string {
    if (bytes === 0) {return '0 Bytes';}
    const k = 1024;
    const sizes = ['Bytes', 'KB', 'MB', 'GB'];
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
  }

  /**
   * Get persona name with fallback
   */
  private static getPersonaName(
    personaId: string | undefined,
    personaInfoMap: Record<string, PersonaInfo>
  ): string {
    if (!personaId) {return 'AI';}
    return personaInfoMap[personaId]?.name || getPersonaDisplayName(personaId);
  }

  /**
   * Get persona role with fallback
   */
  private static getPersonaRole(
    personaId: string | undefined,
    personaInfoMap: Record<string, PersonaInfo>
  ): string {
    if (!personaId) {return 'AI';}
    return personaInfoMap[personaId]?.role || getPersonaRole(personaId);
  }

  /**
   * Calculate session duration
   */
  private static calculateDuration(startTime: number, endTime: number): string {
    const durationMs = endTime - startTime;
    const minutes = Math.floor(durationMs / (1000 * 60));
    const seconds = Math.floor((durationMs % (1000 * 60)) / 1000);

    if (minutes === 0) {
      return `${seconds} seconds`;
    } else if (minutes < 60) {
      return `${minutes} minutes, ${seconds} seconds`;
    } else {
      const hours = Math.floor(minutes / 60);
      const remainingMinutes = minutes % 60;
      return `${hours} hours, ${remainingMinutes} minutes`;
    }
  }

  /**
   * Escape HTML characters to prevent XSS
   */
  private static escapeHtml(text: string): string {
    if (typeof text !== 'string') {
      return String(text);
    }
    
    // Fallback to manual escaping for better compatibility
    const htmlEscapes: Record<string, string> = {
      '&': '&amp;',
      '<': '&lt;',
      '>': '&gt;',
      '"': '&quot;',
      "'": '&#x27;',
      '/': '&#x2F;'
    };
    
    return text.replace(/[&<>"'/]/g, (match) => htmlEscapes[match] || match);
  }

  /**
   * Export chat to HTML file and open in new window
   */
  static exportChatToHTML(data: ChatExportData): void {
    const htmlContent = this.generateHTML(data);

    // Open in new window
    const newWindow = window.open('', '_blank');
    if (newWindow) {
      newWindow.document.write(htmlContent);
      newWindow.document.close();

      // Focus the new window
      newWindow.focus();

      // Optional: Automatically trigger print dialog after a short delay
      setTimeout(() => {
        if (!newWindow.closed) {
          newWindow.print();
        }
      }, 1000);
    } else {
      // Fallback: download as HTML file if popup blocked
      this.downloadHTML(
        htmlContent,
        `conversation-session-${this.escapeHtml(data.session.sessionId)}-${this.getDateString()}.html`
      );
    }
  }

  /**
   * Download HTML content as file
   */
  private static downloadHTML(htmlContent: string, filename: string): void {
    const blob = new Blob([htmlContent], { type: 'text/html' });
    const url = URL.createObjectURL(blob);
    const link = document.createElement('a');
    link.href = url;
    link.download = filename;
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);

    // Clean up the URL object
    URL.revokeObjectURL(url);
  }

  /**
   * Get formatted date string for filenames
   */
  private static getDateString(): string {
    const now = new Date();
    return now.toISOString().split('T')[0]; // YYYY-MM-DD format
  }
}
